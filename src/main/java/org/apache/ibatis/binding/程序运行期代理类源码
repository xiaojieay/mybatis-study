/*
 * 通过Arthas获取到demo中代理
 */
package com.sun.proxy;

import com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper;
import com.github.jay.custom.project.custom.dal.entity.FlightInfoDO;
import com.github.jay.custom.project.custom.dal.entity.FlightInfoDOExample;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.List;

public final class $Proxy118 extends Proxy implements FlightInfoMapper {

    private static Method m1;
    private static Method m2;
    private static Method m9;
    private static Method m6;
    private static Method m13;
    private static Method m12;
    private static Method m0;
    private static Method m7;
    private static Method m3;
    private static Method m8;
    private static Method m10;
    private static Method m11;
    private static Method m5;
    private static Method m4;

    public $Proxy118(InvocationHandler invocationHandler) {
        super(invocationHandler);
    }

    public final boolean equals(Object object) {
        try {
            return (Boolean)this.h.invoke(this, m1, new Object[]{object});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final String toString() {
        try {
            return (String)this.h.invoke(this, m2, null);
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int updateByExample(FlightInfoDO flightInfoDO, FlightInfoDOExample flightInfoDOExample) {
        try {
            return (Integer)this.h.invoke(this, m9, new Object[]{flightInfoDO, flightInfoDOExample});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final List selectByExample(FlightInfoDOExample flightInfoDOExample) {
        try {
            return (List)this.h.invoke(this, m6, new Object[]{flightInfoDOExample});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final List selectAll() {
        try {
            return (List)this.h.invoke(this, m13, null);
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int insertSelective(FlightInfoDO flightInfoDO) {
        try {
            return (Integer)this.h.invoke(this, m12, new Object[]{flightInfoDO});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int hashCode() {
        try {
            return (Integer)this.h.invoke(this, m0, null);
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final FlightInfoDO selectByPrimaryKey(Long l) {
        try {
            return (FlightInfoDO)this.h.invoke(this, m7, new Object[]{l});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int insert(FlightInfoDO flightInfoDO) {
        try {
            return (Integer)this.h.invoke(this, m3, new Object[]{flightInfoDO});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int updateByExampleSelective(FlightInfoDO flightInfoDO, FlightInfoDOExample flightInfoDOExample) {
        try {
            return (Integer)this.h.invoke(this, m8, new Object[]{flightInfoDO, flightInfoDOExample});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int updateByPrimaryKeySelective(FlightInfoDO flightInfoDO) {
        try {
            return (Integer)this.h.invoke(this, m10, new Object[]{flightInfoDO});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int updateByPrimaryKey(FlightInfoDO flightInfoDO) {
        try {
            return (Integer)this.h.invoke(this, m11, new Object[]{flightInfoDO});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int deleteByPrimaryKey(Long l) {
        try {
            return (Integer)this.h.invoke(this, m5, new Object[]{l});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public final int deleteByExample(FlightInfoDOExample flightInfoDOExample) {
        try {
            return (Integer)this.h.invoke(this, m4, new Object[]{flightInfoDOExample});
        }
        catch (Error | RuntimeException throwable) {
            throw throwable;
        }
        catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    static {
        try {
            m1 = Class.forName("java.lang.Object").getMethod("equals", Class.forName("java.lang.Object"));
            m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);
            m9 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("updateByExample", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"), Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDOExample"));
            m6 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("selectByExample", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDOExample"));
            m13 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("selectAll", new Class[0]);
            m12 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("insertSelective", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"));
            m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);
            m7 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("selectByPrimaryKey", Class.forName("java.lang.Long"));
            m3 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("insert", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"));
            m8 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("updateByExampleSelective", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"), Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDOExample"));
            m10 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("updateByPrimaryKeySelective", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"));
            m11 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("updateByPrimaryKey", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDO"));
            m5 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("deleteByPrimaryKey", Class.forName("java.lang.Long"));
            m4 = Class.forName("com.github.jay.custom.project.custom.dal.dao.FlightInfoMapper").getMethod("deleteByExample", Class.forName("com.github.jay.custom.project.custom.dal.entity.FlightInfoDOExample"));
            return;
        }
        catch (NoSuchMethodException noSuchMethodException) {
            throw new NoSuchMethodError(noSuchMethodException.getMessage());
        }
        catch (ClassNotFoundException classNotFoundException) {
            throw new NoClassDefFoundError(classNotFoundException.getMessage());
        }
    }
}